{
	"info": {
		"_postman_id": "73e67527-2597-4d91-b057-e0b3b66d2978",
		"name": "Baseline_Extensions",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31642464",
		"_collection_link": "https://grey-desert-539069.postman.co/workspace/My-Workspace~8c25c9aa-846e-4e00-84e7-483f00729f04/collection/31642464-73e67527-2597-4d91-b057-e0b3b66d2978?action=share&source=collection_link&creator=31642464"
	},
	"item": [
		{
			"name": "Create Post1 - Baseline",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"pm.environment.set(\"key\", jsonData.key);",
							"pm.environment.set(\"id\",jsonData.id);",
							"pm.environment.set(\"post_id\",jsonData.id);",
							"pm.environment.set(\"post1_timestamp\", jsonData.timestamp)",
							"",
							"// All Tests",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response Content-Type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - id, key, and timestamp\", function () {    ",
							"    pm.expect(jsonData).to.be.an('object');",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData).to.have.property('key');",
							"    pm.expect(jsonData).to.have.property('timestamp');",
							"});",
							"",
							"",
							"pm.test(\"Id is a non-negative integer\", function () {    ",
							"    pm.expect(jsonData).to.be.an('object');",
							"    pm.expect(jsonData.id).to.be.a('number').and.to.be.at.least(1);",
							"});",
							"",
							"",
							"pm.test(\"Key is a valid base64 URL-safe string\", function () {",
							"  pm.expect(jsonData).to.be.an('object');",
							"  pm.expect(jsonData.key).to.match(/^[A-Za-z0-9_-]{22,}=?=?$/), \"key should be long enough and not generated using math.random\";",
							"});",
							"",
							"pm.test(\"Timestamp is in a valid date format\", function () {",
							"  ",
							"  pm.expect(jsonData).to.be.an('object');",
							"  pm.expect(jsonData.timestamp).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{1,6}Z?$/, \"Timestamp should be in valid date format\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"msg\": \"Hello, World!\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:5000/post",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"post"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Post1 - Baseline",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"// Parse the response body as JSON",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"post 1 contents correct\", function () {",
							"    pm.expect(jsonData.msg).to.eql(\"Hello, World!\");",
							"    pm.expect(jsonData.key === undefined);",
							"});",
							"",
							"pm.test(\"Response body is an object\", function () {",
							"    pm.expect(jsonData).to.be.an('object');",
							"});",
							"",
							"pm.test(\"Id is an integer\", function () {",
							"    pm.expect(jsonData.id).to.be.a('number');",
							"    pm.expect(jsonData.id % 1).to.equal(0, \"Id should be an integer\");",
							"});",
							"",
							"pm.test(\"Timestamp is in a valid date format\", function () {",
							"    pm.expect(jsonData.timestamp).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{1,6}Z?$/, \"Timestamp should be in valid ISO 8601 UTC format\");",
							"});",
							"",
							"pm.test(\"Msg is a string\", function () {",
							"    pm.expect(jsonData.msg).to.be.a('string');",
							"});",
							"",
							"pm.test(\"Response does not include the key\", function () {",
							"    pm.expect(jsonData).to.not.have.property('key');",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:5000/post/{{id}}",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"post",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Post1 - Baseline",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test that the response status code is 200 for successful deletion",
							"pm.test(\"Response status code is 200 for successful deletion\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"// Parse the response body as JSON",
							"var jsonData = pm.response.json();",
							"",
							"// Testing the structure of the response",
							"pm.test(\"Response includes id, key, and timestamp for successful deletion\", function () {",
							"    pm.expect(jsonData).to.be.an('object');",
							"    pm.expect(jsonData.id).to.be.a('number');",
							"    pm.expect(jsonData.key).to.be.a('string');",
							"    pm.expect(jsonData.timestamp).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{1,6}Z?$/, \"Timestamp should be in valid ISO 8601 UTC format\");",
							"});",
							"",
							"// Test that the response body matches the environment variables",
							"pm.test(\"Response body matches environment variables\", function () {",
							"    // Retrieve environment variables",
							"    var expectedId = pm.environment.get(\"post_id\");",
							"    var expectedKey = pm.environment.get(\"key\");",
							"    var expectedTimestamp = pm.environment.get(\"post1_timestamp\");",
							"",
							"    // Parse the response body as JSON",
							"    var jsonData = pm.response.json();",
							"",
							"    // Assert that the response fields match the environment variables",
							"    pm.expect(jsonData.id).to.eql(expectedId, \"The 'id' in the response does not match the 'post_id' environment variable.\");",
							"    pm.expect(jsonData.key).to.eql(expectedKey, \"The 'key' in the response does not match the 'key' environment variable.\");",
							"    pm.expect(jsonData.timestamp).to.eql(expectedTimestamp, \"The 'timestamp' in the response does not match the 'post1timestamp' environment variable.\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:5000/post/{{post_id}}/delete/{{key}}",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"post",
						"{{post_id}}",
						"delete",
						"{{key}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Post1 Again - Baseline",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 404\", function () {",
							"  pm.expect(pm.response.code).to.equal(404);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required Content-Type header\", function () {",
							"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Presence of 'err' field in the response\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.have.property('err');",
							"    pm.expect(responseData.err).to.equal(\"Post not found\");",
							"});",
							"",
							"",
							"pm.test(\"Err field should not be empty\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.err).to.exist.and.to.have.lengthOf.at.least(1, \"Err field should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Validate that the 'id' parameter is properly used in the request URL\", function () {",
							"    pm.expect(pm.request.url.toString()).to.include(pm.variables.get(\"id\"));",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:5000/post/{{id}}",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"post",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create User1 - Extension 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"})",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.environment.set('user1_id', jsonData.user_id)",
							"pm.environment.set('user1secretKey', jsonData.key)",
							"",
							"pm.test('Response has the required fields - key and user_id', function () {",
							"    pm.expect(jsonData).to.be.an('object');",
							"    pm.expect(jsonData).to.have.property('key');",
							"    pm.expect(jsonData).to.have.property('user_id');",
							"})",
							"",
							"pm.test('User_id is a non-negative integer', function () {",
							"    pm.expect(jsonData).to.be.an('object');",
							"    pm.expect(jsonData.user_id).to.be.a('number').and.to.be.at.least(1);",
							"})",
							"",
							"pm.test('Content-Type is application/json', function () {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
							"})",
							"",
							"pm.test('Key is a valid base64 URL-safe string', function () {",
							"    pm.expect(jsonData).to.be.an('object');",
							"    pm.expect(jsonData.key).to.match(/^[A-Za-z0-9_-]{22,}=?=?$/), 'key should be long enough and not generated using math.random';",
							"})",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"johndoe69\",\n    \"real_name\": \"John Doe\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:5000/user",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Post2 with User1 - Extension 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"pm.environment.set(\"post2_id\",jsonData.id);",
							"pm.environment.set(\"post2_timestamp\", jsonData.timestamp)",
							"",
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Id is a non-negative integer\", function () {  ",
							"  pm.expect(jsonData).to.be.an('object');",
							"  pm.expect(jsonData.id).to.be.a('number').and.to.be.at.least(0);",
							"});",
							"",
							"",
							"pm.test(\"Key is a valid base64 URL-safe string\", function () {",
							"  pm.expect(jsonData).to.be.an('object');",
							"  pm.expect(jsonData.key).to.match(/^[A-Za-z0-9_-]{22,}=?=?$/), \"key should be long enough and not generated using math.random\";",
							"});",
							"",
							"pm.test(\"Timestamp is in a valid date format\", function () {",
							"  ",
							"  pm.expect(jsonData).to.be.an('object');",
							"  pm.expect(jsonData.timestamp).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{1,6}Z?$/, \"Timestamp should be in valid date format\");",
							"});",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"pm.test(\"Response has the required fields - id, key, and timestamp\", function () {    ",
							"    pm.expect(jsonData).to.be.an('object');",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData).to.have.property('key');",
							"    pm.expect(jsonData).to.have.property('timestamp');",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"msg\": \"Hello, World!\",\n    \"user_key\": \"{{user1secretKey}}\",\n    \"user_id\": {{user1_id}}\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:5000/post",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"post"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Post2 of User1 using UserKey",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200 for successful deletion\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:5000/post/{{post2_id}}/delete/{{user1secretKey}}",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"post",
						"{{post2_id}}",
						"delete",
						"{{user1secretKey}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Post2 Again with User1 - Extension 1 Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"pm.environment.set(\"post2_id\",jsonData.id);",
							"pm.environment.set(\"post2_timestamp\", jsonData.timestamp)",
							"",
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Id is a non-negative integer\", function () {  ",
							"  pm.expect(jsonData).to.be.an('object');",
							"  pm.expect(jsonData.id).to.be.a('number').and.to.be.at.least(0);",
							"});",
							"",
							"",
							"pm.test(\"Key is a valid base64 URL-safe string\", function () {",
							"  pm.expect(jsonData).to.be.an('object');",
							"  pm.expect(jsonData.key).to.match(/^[A-Za-z0-9_-]{22,}=?=?$/), \"key should be long enough and not generated using math.random\";",
							"});",
							"",
							"pm.test(\"Timestamp is in a valid date format\", function () {",
							"  ",
							"  pm.expect(jsonData).to.be.an('object');",
							"  pm.expect(jsonData.timestamp).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{1,6}Z?$/, \"Timestamp should be in valid date format\");",
							"});",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"pm.test(\"Response has the required fields - id, key, and timestamp\", function () {    ",
							"    pm.expect(jsonData).to.be.an('object');",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData).to.have.property('key');",
							"    pm.expect(jsonData).to.have.property('timestamp');",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"msg\": \"Hello, World!\",\n    \"user_key\": \"{{user1secretKey}}\",\n    \"user_id\": {{user1_id}}\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:5000/post",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"post"
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit User1 Metadata - Extension 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required Content-Type header with value application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'msg' field is present in the response\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.have.property('msg');",
							"});",
							"",
							"",
							"pm.test(\"Msg field should be a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.msg).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"pm.test(\"Msg field value is 'User metadata updated'\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData.msg).to.equal('User metadata updated');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"key\": \"{{user1secretKey}}\",\n    \"real_name\": \"Johnathan Doe\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:5000/user/{{user1_id}}",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"user",
						"{{user1_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User1 Metadata - Extension 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - real_name, user_id, and username\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('real_name');",
							"    pm.expect(responseData).to.have.property('user_id');",
							"    pm.expect(responseData).to.have.property('username');",
							"});",
							"",
							"",
							"pm.test(\"Real_name is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.real_name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Real_name should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"User_id is a non-negative integer\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.user_id).to.be.a('number');",
							"  pm.expect(responseData.user_id).to.be.at.least(0);",
							"});",
							"",
							"",
							"pm.test(\"Username is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.username).to.be.a('string').and.to.have.length.above(0, \"Username should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"User1 contents are present\", function () {",
							"  const responseData = pm.response.json();",
							"  pm.expect(responseData.real_name).to.eql(\"Johnathan Doe\");",
							"  pm.expect(responseData.username).to.eql(\"johndoe69\");",
							"  pm.expect(responseData.user_id).to.eql(1);",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:5000/user/{{user1_id}}",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"user",
						"{{user1_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Post2 - Extension 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response content type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Ids of replies is an array\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.ids_of_replies).to.be.an('array');",
							"});",
							"",
							"",
							"pm.test(\"Timestamp is in a valid date format\", function () {",
							"    pm.expect(jsonData.timestamp).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{1,6}Z?$/, \"Timestamp should be in valid ISO 8601 UTC format\");",
							"});",
							"",
							"pm.test(\"Response body matches post data\", function () {",
							"    // Retrieve environment variables",
							"    var expectedId = pm.environment.get(\"post2_id\");",
							"    var expectedTimestamp = pm.environment.get(\"post2_timestamp\");",
							"    var expectedUserId = pm.environment.get(\"user1_id\");",
							"",
							"    // Parse the response body as JSON",
							"    var jsonData = pm.response.json();",
							"",
							"    // Assert that the response fields match the environment variables",
							"    pm.expect(jsonData.ids_of_replies).to.eql([]);",
							"    pm.expect(jsonData.id).to.eql(expectedId, \"The 'id' in the response does not match the 'post_id' environment variable.\");",
							"    pm.expect(jsonData.key === undefined);",
							"    pm.expect(jsonData.timestamp).to.eql(expectedTimestamp, \"The 'timestamp' in the response does not match the 'post1timestamp' environment variable.\");",
							"    pm.expect(jsonData.msg).to.eql(\"Hello, World!\");",
							"    pm.expect(jsonData.username).to.eql(\"johndoe69\");",
							"    pm.expect(jsonData.replying_to_id).to.eql(null);",
							"    pm.expect(jsonData.user_id).to.eql(expectedUserId, \"The 'user_id' in the response does not match the 'user1_id' environment variable.\");    ",
							"});",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:5000/post/{{post2_id}}",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"post",
						"{{post2_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Post3 : Reply to Post2 - Extension 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"pm.environment.set(\"post3_id\",jsonData.id);",
							"pm.environment.set(\"post3_timestamp\", jsonData.timestamp)",
							"",
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Id is a non-negative integer\", function () {  ",
							"  pm.expect(jsonData).to.be.an('object');",
							"  pm.expect(jsonData.id).to.be.a('number').and.to.be.at.least(0);",
							"});",
							"",
							"",
							"pm.test(\"Key is a valid base64 URL-safe string\", function () {",
							"  pm.expect(jsonData).to.be.an('object');",
							"  pm.expect(jsonData.key).to.match(/^[A-Za-z0-9_-]{22,}=?=?$/), \"key should be long enough and not generated using math.random\";",
							"});",
							"",
							"pm.test(\"Timestamp is in a valid date format\", function () {",
							"  ",
							"  pm.expect(jsonData).to.be.an('object');",
							"  pm.expect(jsonData.timestamp).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{1,6}Z?$/, \"Timestamp should be in valid date format\");",
							"});",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"pm.test(\"Response has the required fields - id, key, and timestamp\", function () {    ",
							"    pm.expect(jsonData).to.be.an('object');",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData).to.have.property('key');",
							"    pm.expect(jsonData).to.have.property('timestamp');",
							"});",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"msg\": \"Hello, World!\",\n    \"replying_to_id\":{{post2_id}}\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:5000/post",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"post"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Post3 - Extension 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response content type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Ids of replies is an array\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.ids_of_replies).to.be.an('array');",
							"});",
							"",
							"",
							"pm.test(\"Timestamp is in a valid date format\", function () {",
							"    pm.expect(jsonData.timestamp).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{1,6}Z?$/, \"Timestamp should be in valid ISO 8601 UTC format\");",
							"});",
							"",
							"pm.test(\"Response body matches post data\", function () {",
							"    // Retrieve environment variables",
							"    var expectedId = pm.environment.get(\"post3_id\");",
							"    var expectedTimestamp = pm.environment.get(\"post3_timestamp\");",
							"    var expectedReplyingToId = pm.environment.get(\"post2_id\");",
							"",
							"    // Parse the response body as JSON",
							"    var jsonData = pm.response.json();",
							"",
							"    // Assert that the response fields match the environment variables",
							"    pm.expect(jsonData.ids_of_replies).to.eql([]);",
							"    pm.expect(jsonData.id).to.eql(expectedId, \"The 'id' in the response does not match the 'post_id' environment variable.\");",
							"    pm.expect(jsonData.key === undefined);",
							"    pm.expect(jsonData.timestamp).to.eql(expectedTimestamp, \"The 'timestamp' in the response does not match the 'post1timestamp' environment variable.\");",
							"    pm.expect(jsonData.msg).to.eql(\"Hello, World!\");",
							"    pm.expect(jsonData.username).to.eql(null);",
							"    pm.expect(jsonData.replying_to_id).to.eql(expectedReplyingToId, \"The 'replying_to_id' in the response does not match the 'post2_id' environment variable.\");",
							"    pm.expect(jsonData.user_id).to.eql(null); ",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:5000/post/{{post3_id}}",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"post",
						"{{post3_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Post2 - Extension 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response content type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Ids of replies is an array\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.ids_of_replies).to.be.an('array');",
							"});",
							"",
							"",
							"pm.test(\"Timestamp is in a valid date format\", function () {",
							"    pm.expect(jsonData.timestamp).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{1,6}Z?$/, \"Timestamp should be in valid ISO 8601 UTC format\");",
							"});",
							"",
							"pm.test(\"Response body matches post data\", function () {",
							"    // Retrieve environment variables",
							"    var expectedId = pm.environment.get(\"post2_id\");",
							"    var expectedTimestamp = pm.environment.get(\"post2_timestamp\");",
							"    var expectedIdsOfReplies = pm.environment.get(\"post3_id\");",
							"    var expectedUserId = pm.environment.get(\"user1_id\");",
							"    // Parse the response body as JSON",
							"    var jsonData = pm.response.json();",
							"",
							"    // Assert that the response fields match the environment variables",
							"    pm.expect(jsonData.ids_of_replies).to.eql([expectedIdsOfReplies],\"The 'ids_of_replies' in the response does not match the 'post3_id' environment variable.\");",
							"    pm.expect(jsonData.id).to.eql(expectedId, \"The 'id' in the response does not match the 'post_id' environment variable.\");",
							"    pm.expect(jsonData.key === undefined);",
							"    pm.expect(jsonData.timestamp).to.eql(expectedTimestamp, \"The 'timestamp' in the response does not match the 'post1timestamp' environment variable.\");",
							"    pm.expect(jsonData.msg).to.eql(\"Hello, World!\");",
							"    pm.expect(jsonData.username).to.eql(\"johndoe69\");",
							"    pm.expect(jsonData.replying_to_id).to.eql(null);",
							"    pm.expect(jsonData.user_id).to.eql(expectedUserId, \"The 'user_id' in the response does not match the 'user1_id' environment variable.\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:5000/post/{{post2_id}}",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"post",
						"{{post2_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Posts : Date Range - Extension 4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response content type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"// Assuming the response is an array and we want to test the first object in that array",
							"var firstPost = jsonData[0];",
							"",
							"pm.test(\"Ids of replies is an array\", function () {",
							"    pm.expect(firstPost).to.be.an('object');",
							"    pm.expect(firstPost.ids_of_replies).to.be.an('array');",
							"});",
							"",
							"pm.test(\"Timestamp is in a valid date format\", function () {",
							"    pm.expect(firstPost.timestamp).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{1,6}Z?$/, \"Timestamp should be in valid ISO 8601 UTC format\");",
							"});",
							"",
							"pm.test(\"Response body matches post data\", function () {",
							"    // Retrieve environment variables",
							"    var expectedId = pm.environment.get(\"post2_id\");",
							"    var expectedTimestamp = pm.environment.get(\"post2_timestamp\");",
							"    var expectedIdsOfReplies = pm.environment.get(\"post3_id\");",
							"    var expectedUserId = pm.environment.get(\"user1_id\");",
							"",
							"    // Assert that the response fields match the environment variables",
							"    pm.expect(firstPost.id).to.eql(parseInt(expectedId), \"The 'id' in the response does not match the 'post_id' environment variable.\");",
							"    pm.expect(firstPost.timestamp).to.eql(expectedTimestamp, \"The 'timestamp' in the response does not match the 'post1timestamp' environment variable.\");",
							"    pm.expect(firstPost.ids_of_replies).to.include(parseInt(expectedIdsOfReplies),\"The 'ids_of_replies' in the response does not match the 'post3_id' environment variable.\");",
							"    pm.expect(firstPost.user_id).to.eql(parseInt(expectedUserId), \"The 'user_id' in the response does not match the 'user1_id' environment variable.\");",
							"    pm.expect(firstPost.msg).to.eql(\"Hello, World!\");",
							"    pm.expect(firstPost.username).to.eql(\"johndoe69\");",
							"    pm.expect(firstPost.replying_to_id).to.be.null;",
							"    // Checking for the absence of 'key' in the response object",
							"    pm.expect(firstPost).to.not.have.property('key');",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:5000/posts/range?start={{post1_timestamp}}&end={{post2_timestamp}}",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"posts",
						"range"
					],
					"query": [
						{
							"key": "start",
							"value": "{{post1_timestamp}}"
						},
						{
							"key": "end",
							"value": "{{post2_timestamp}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Post4 with User1 - Extension 5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"pm.environment.set(\"post4_id\",jsonData.id);",
							"pm.environment.set(\"post4_timestamp\", jsonData.timestamp)",
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Id is a non-negative integer\", function () {  ",
							"  pm.expect(jsonData).to.be.an('object');",
							"  pm.expect(jsonData.id).to.be.a('number').and.to.be.at.least(0);",
							"});",
							"",
							"",
							"pm.test(\"Key is a valid base64 URL-safe string\", function () {",
							"  pm.expect(jsonData).to.be.an('object');",
							"  pm.expect(jsonData.key).to.match(/^[A-Za-z0-9_-]{22,}=?=?$/), \"key should be long enough and not generated using math.random\";",
							"});",
							"",
							"pm.test(\"Timestamp is in a valid date format\", function () {",
							"  ",
							"  pm.expect(jsonData).to.be.an('object');",
							"  pm.expect(jsonData.timestamp).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{1,6}Z?$/, \"Timestamp should be in valid date format\");",
							"});",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"pm.test(\"Response has the required fields - id, key, and timestamp\", function () {    ",
							"    pm.expect(jsonData).to.be.an('object');",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData).to.have.property('key');",
							"    pm.expect(jsonData).to.have.property('timestamp');",
							"});",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"msg\": \"Hello, World! Again...\",\n    \"user_key\": \"{{user1secretKey}}\",\n    \"user_id\": {{user1_id}}\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:5000/post",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"post"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Posts : User1 - Extension 5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response content type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"// Assuming the response is an array and we want to test the first object in that array",
							"var firstPost = jsonData[0];",
							"var secondPost = jsonData[1];",
							"",
							"pm.test(\"Ids of replies is an array\", function () {",
							"    pm.expect(firstPost).to.be.an('object');",
							"    pm.expect(firstPost.ids_of_replies).to.be.an('array');",
							"    pm.expect(secondPost).to.be.an('object');",
							"    pm.expect(secondPost.ids_of_replies).to.be.an('array');",
							"});",
							"",
							"pm.test(\"Timestamp is in a valid date format\", function () {",
							"    pm.expect(firstPost.timestamp).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{1,6}Z?$/, \"firstPost Timestamp should be in valid ISO 8601 UTC format\");",
							"    pm.expect(secondPost.timestamp).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{1,6}Z?$/, \"secondPost Timestamp should be in valid ISO 8601 UTC format\");",
							"});",
							"",
							"pm.test(\"Response body matches firstpost data \", function () {",
							"    // Retrieve environment variables",
							"    var expectedId = pm.environment.get(\"post2_id\");",
							"    var expectedTimestamp = pm.environment.get(\"post2_timestamp\");",
							"    var expectedIdsOfReplies = pm.environment.get(\"post3_id\");",
							"    var expectedUserId = pm.environment.get(\"user1_id\");",
							"",
							"    // Assert that the response fields match the environment variables",
							"    pm.expect(firstPost.id).to.eql(parseInt(expectedId), \"The 'id' in the response does not match the 'post2_id' environment variable.\");",
							"    pm.expect(firstPost.timestamp).to.eql(expectedTimestamp, \"The 'timestamp' in the response does not match the 'post2_timestamp' environment variable.\");",
							"    pm.expect(firstPost.ids_of_replies).to.include(parseInt(expectedIdsOfReplies),\"The 'ids_of_replies' in the response does not match the 'post3_id' environment variable.\");",
							"    pm.expect(firstPost.user_id).to.eql(parseInt(expectedUserId), \"The 'user_id' in the response does not match the 'user1_id' environment variable.\");",
							"    pm.expect(firstPost.msg).to.eql(\"Hello, World!\");",
							"    pm.expect(firstPost.username).to.eql(\"johndoe69\");",
							"    pm.expect(firstPost.replying_to_id).to.be.null;",
							"    pm.expect(firstPost).to.not.have.property('key');",
							"});",
							"",
							"pm.test(\"Response body matches secondPost data \", function () {",
							"    // Retrieve environment variables",
							"    var expectedId = pm.environment.get(\"post4_id\");",
							"    var expectedTimestamp = pm.environment.get(\"post4_timestamp\");",
							"    var expectedUserId = pm.environment.get(\"user1_id\");",
							"",
							"    // Assert that the response fields match the environment variables",
							"    pm.expect(secondPost.id).to.eql(parseInt(expectedId), \"The 'id' in the response does not match the 'post4_id' environment variable.\");",
							"    pm.expect(secondPost.timestamp).to.eql(expectedTimestamp, \"The 'timestamp' in the response does not match the 'post4_timestamp' environment variable.\");",
							"    pm.expect(secondPost.ids_of_replies).to.eql([]);",
							"    pm.expect(secondPost.user_id).to.eql(parseInt(expectedUserId), \"The 'user_id' in the response does not match the 'user1_id' environment variable.\");",
							"    pm.expect(secondPost.msg).to.eql(\"Hello, World! Again...\");",
							"    pm.expect(secondPost.username).to.eql(\"johndoe69\");",
							"    pm.expect(secondPost.replying_to_id).to.be.null;",
							"    pm.expect(secondPost).to.not.have.property('key');",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:5000/posts/user/{{user1_id}}",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"posts",
						"user",
						"{{user1_id}}"
					]
				}
			},
			"response": []
		}
	]
}